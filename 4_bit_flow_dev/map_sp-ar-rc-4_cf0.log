ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet] AMulet Version 005
[amulet] Aiger multiplier examination tool
[amulet] Copyright (C) 2019, Daniela Kaufmann, Johannes Kepler University Linz
[amulet] reading 'map_sp-ar-rc-4_cf0_p2_pready.aig'
[amulet] found regular multiplier: N * N = 2N
[amulet] MILOA 105 8 0 8 97
[amulet] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet] assuming booth recoding
[amulet] assigning slices to variables
[amulet] totally merged 33 variable(s)
[amulet] totally promoted 1 variable(s)
[amulet] filled 8 slices
[amulet] ordered 113 variables
[amulet] decomposed 65 variables
[amulet] final reduction started
[amulet] reduced by slice 7
[amulet] reduced by slice 6
[amulet] reduced by slice 5
[amulet] reduced by slice 4
[amulet] reduced by slice 3
[amulet] reduced by slice 2
[amulet] reduced by slice 1
[amulet] reduced by slice 0
[amulet]  
[amulet] final remainder is -8*b2*b1*b0*a2*a1*a0+4*b2*b1*a1*a0+8*b1*b0*a2*a1-16*b1*a3-4*b1*a1;
[amulet]  
[amulet] INCORRECT MULTIPLIER
[amulet] 
[amulet] COUNTER EXAMPLES ARE: 
[amulet]   b1 = a3 = 1, remaining inputs = 0;
[amulet]   a1 = b1 = 1, remaining inputs = 0;
[amulet] 
[amulet] 
[amulet] Counter examples are written to map_sp-ar-rc-4_cf0_p2_pready.wit
[amulet] Call 
[amulet]        'aiger/aigsim map_sp-ar-rc-4_cf0_p2_pready.aig map_sp-ar-rc-4_cf0_p2_pready.wit' 
[amulet] to simulate the output of the multiplier for the provided counter example(s).
[amulet] 
[amulet] aiger/aigsim produces output in the form:  a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet] AMulet Version 005
[amulet] Aiger multiplier examination tool
[amulet] Copyright (C) 2019, Daniela Kaufmann, Johannes Kepler University Linz
[amulet] reading 'map_sp-ar-rc-4_cf0_p2_pready.aig'
[amulet] found regular multiplier: N * N = 2N
[amulet] MILOA 115 8 0 8 107
[amulet] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet] assuming simple pp generator
[amulet] assigning slices to variables
[amulet] totally merged 36 variable(s)
[amulet] totally promoted 3 variable(s)
[amulet] filled 8 slices
[amulet] ordered 123 variables
[amulet] decomposed 71 variables
[amulet] final reduction started
[amulet] reduced by slice 7
[amulet] reduced by slice 6
[amulet] reduced by slice 5
[amulet] reduced by slice 4
[amulet] reduced by slice 3
[amulet] reduced by slice 2
[amulet] reduced by slice 1
[amulet] reduced by slice 0
[amulet]  
[amulet] final remainder is -8*b2*b1*b0*a2*a1*a0+4*b2*b1*a1*a0+8*b1*b0*a2*a1-4*b1*a1;
[amulet]  
[amulet] INCORRECT MULTIPLIER
[amulet] 
[amulet] COUNTER EXAMPLES ARE: 
[amulet]   a1 = b1 = 1, remaining inputs = 0;
[amulet] 
[amulet] 
[amulet] Counter examples are written to map_sp-ar-rc-4_cf0_p2_pready.wit
[amulet] Call 
[amulet]        'aiger/aigsim map_sp-ar-rc-4_cf0_p2_pready.aig map_sp-ar-rc-4_cf0_p2_pready.wit' 
[amulet] to simulate the output of the multiplier for the provided counter example(s).
[amulet] 
[amulet] aiger/aigsim produces output in the form:  a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet] AMulet Version 005
[amulet] Aiger multiplier examination tool
[amulet] Copyright (C) 2019, Daniela Kaufmann, Johannes Kepler University Linz
[amulet] reading 'map_sp-ar-rc-4_cf0_p2_pready.aig'
[amulet] found regular multiplier: N * N = 2N
[amulet] MILOA 105 8 0 8 97
[amulet] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet] assuming booth recoding
[amulet] assigning slices to variables
[amulet] totally merged 33 variable(s)
[amulet] totally promoted 1 variable(s)
[amulet] filled 8 slices
[amulet] ordered 113 variables
[amulet] decomposed 65 variables
[amulet] final reduction started
[amulet] reduced by slice 7
[amulet] reduced by slice 6
[amulet] reduced by slice 5
[amulet] reduced by slice 4
[amulet] reduced by slice 3
[amulet] reduced by slice 2
[amulet] reduced by slice 1
[amulet] reduced by slice 0
[amulet]  
[amulet] final remainder is -8*b2*b1*b0*a2*a1*a0+4*b2*b1*a1*a0+8*b2*b0*a2*a0-4*b2*a0-16*b1*a3;
[amulet]  
[amulet] INCORRECT MULTIPLIER
[amulet] 
[amulet] COUNTER EXAMPLES ARE: 
[amulet]   a0 = b2 = 1, remaining inputs = 0;
[amulet]   b1 = a3 = 1, remaining inputs = 0;
[amulet] 
[amulet] 
[amulet] Counter examples are written to map_sp-ar-rc-4_cf0_p2_pready.wit
[amulet] Call 
[amulet]        'aiger/aigsim map_sp-ar-rc-4_cf0_p2_pready.aig map_sp-ar-rc-4_cf0_p2_pready.wit' 
[amulet] to simulate the output of the multiplier for the provided counter example(s).
[amulet] 
[amulet] aiger/aigsim produces output in the form:  a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet] AMulet Version 005
[amulet] Aiger multiplier examination tool
[amulet] Copyright (C) 2019, Daniela Kaufmann, Johannes Kepler University Linz
[amulet] reading 'map_sp-ar-rc-4_cf0_p2_pready.aig'
[amulet] found regular multiplier: N * N = 2N
[amulet] MILOA 117 8 0 8 109
[amulet] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet] assuming simple pp generator
[amulet] assigning slices to variables
[amulet] totally merged 38 variable(s)
[amulet] totally promoted 3 variable(s)
[amulet] filled 8 slices
[amulet] ordered 125 variables
[amulet] decomposed 73 variables
[amulet] final reduction started
[amulet] reduced by slice 7
[amulet] reduced by slice 6
[amulet] reduced by slice 5
[amulet] reduced by slice 4
[amulet] reduced by slice 3
[amulet] reduced by slice 2
[amulet] reduced by slice 1
[amulet] reduced by slice 0
[amulet]  
[amulet] final remainder is -8*b2*b1*b0*a2*a1*a0+4*b2*b1*a1*a0+8*b2*b0*a2*a0-4*b2*a0;
[amulet]  
[amulet] INCORRECT MULTIPLIER
[amulet] 
[amulet] COUNTER EXAMPLES ARE: 
[amulet]   a0 = b2 = 1, remaining inputs = 0;
[amulet] 
[amulet] 
[amulet] Counter examples are written to map_sp-ar-rc-4_cf0_p2_pready.wit
[amulet] Call 
[amulet]        'aiger/aigsim map_sp-ar-rc-4_cf0_p2_pready.aig map_sp-ar-rc-4_cf0_p2_pready.wit' 
[amulet] to simulate the output of the multiplier for the provided counter example(s).
[amulet] 
[amulet] aiger/aigsim produces output in the form:  a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
# Benchmark "sp-ar-rc-4" written by ABC on Wed May 12 15:38:50 2021
.model sp-ar-rc-4
Aoki format - Input:IN1[1],Output:P[1]
Working on 4-bit multiplier.
Adding 2 bugs at random locations with bug config 1
python ../code_repo/utilities.py map_sp-ar-rc-4_cf0.blif 4 2 1 IN1[0]
Bugs added at locations n24 n69
Generating AIG's and remainders for each assignments to targets
Remainder generation done !!
