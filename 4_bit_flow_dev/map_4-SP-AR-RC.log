ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet2] AMulet Version 2.1
[amulet2] Aiger multiplier examination tool
[amulet2] Copyright(C) 2020, Daniela Kaufmann, Johannes Kepler University Linz
[amulet2] selected mode: rectification check
[amulet2] reading 'map_4-SP-AR-RC_p2_pready.aig'
[amulet2] MILOA 100 8 0 8 92
[amulet2] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet2] allocating 108 gates
[amulet2] found 15 partial products
[amulet2] assuming booth recoding
[amulet2] found 17 xor-gates
[amulet2] marking xor chain gates
[amulet2] marked 0 xor gates in last slice
[amulet2] remove internal xor gates
[amulet2] removed 30 internal xor gates
[amulet2] slicing based on input cones
[amulet2] totally merged 23 variable(s)
[amulet2] totally promoted 1 variable(s)
[amulet2] filled 8 slices
[amulet2] eliminate single occs
[amulet2] decomposed 28 variables
[amulet2] 
[amulet2] 
[amulet2] started reducing
[amulet2] reducing by slice 7
[amulet2] reducing by slice 6
[amulet2] reducing by slice 5
[amulet2] reducing by slice 4
[amulet2] reducing by slice 3
[amulet2] reducing by slice 2
[amulet2] reducing by slice 1
[amulet2] reducing by slice 0
[amulet2] INCORRECT MULTIPLIER
[amulet2] 
[amulet2] REMAINDER IS
[amulet2] -16*b2*b1*a2*a1-8*b0*a3+16;
[amulet2] 
[amulet2] 
[amulet2] COUNTER EXAMPLES ARE: 
[amulet2]   all inputs = 0;

[amulet2] 
[amulet2] 
[amulet2] Counter examples are written to map_4-SP-AR-RC_p2_pready.cex
[amulet2] You can run 'aigsim' from the AIGER library (http://fmv.jku.at/aiger/)
[amulet2] to simulate the provided counter example(s).
[amulet2] 
[amulet2] Note: 'aiger/aigsim map_4-SP-AR-RC_p2_pready.aig map_4-SP-AR-RC_p2_pready.cex' produces output in the form:
[amulet2]   a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
[amulet2] 
[amulet2] maximum resident set size:                       1.92 MB
[amulet2] used time for initializing:                      0.00 seconds
[amulet2] used time for slicing/elimination:               0.00 seconds
[amulet2] used time for reduction:                         0.00 seconds
[amulet2] used time for freeing memory:                    0.00 seconds
[amulet2] total process time:                              0.00 seconds
ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet2] AMulet Version 2.1
[amulet2] Aiger multiplier examination tool
[amulet2] Copyright(C) 2020, Daniela Kaufmann, Johannes Kepler University Linz
[amulet2] selected mode: rectification check
[amulet2] reading 'map_4-SP-AR-RC_p2_pready.aig'
[amulet2] MILOA 102 8 0 8 94
[amulet2] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet2] allocating 110 gates
[amulet2] found 15 partial products
[amulet2] assuming booth recoding
[amulet2] found 17 xor-gates
[amulet2] marking xor chain gates
[amulet2] marked 0 xor gates in last slice
[amulet2] remove internal xor gates
[amulet2] removed 30 internal xor gates
[amulet2] slicing based on input cones
[amulet2] totally merged 25 variable(s)
[amulet2] totally promoted 1 variable(s)
[amulet2] filled 8 slices
[amulet2] eliminate single occs
[amulet2] decomposed 30 variables
[amulet2] 
[amulet2] 
[amulet2] started reducing
[amulet2] reducing by slice 7
[amulet2] reducing by slice 6
[amulet2] reducing by slice 5
[amulet2] reducing by slice 4
[amulet2] reducing by slice 3
[amulet2] reducing by slice 2
[amulet2] reducing by slice 1
[amulet2] reducing by slice 0
[amulet2] INCORRECT MULTIPLIER
[amulet2] 
[amulet2] REMAINDER IS
[amulet2] 16*b2*b1*a2*a1-16*b2*a1-16*b1*a2-8*b0*a3+24;
[amulet2] 
[amulet2] 
[amulet2] COUNTER EXAMPLES ARE: 
[amulet2]   all inputs = 0;

[amulet2] 
[amulet2] 
[amulet2] Counter examples are written to map_4-SP-AR-RC_p2_pready.cex
[amulet2] You can run 'aigsim' from the AIGER library (http://fmv.jku.at/aiger/)
[amulet2] to simulate the provided counter example(s).
[amulet2] 
[amulet2] Note: 'aiger/aigsim map_4-SP-AR-RC_p2_pready.aig map_4-SP-AR-RC_p2_pready.cex' produces output in the form:
[amulet2]   a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
[amulet2] 
[amulet2] maximum resident set size:                       1.87 MB
[amulet2] used time for initializing:                      0.00 seconds
[amulet2] used time for slicing/elimination:               0.00 seconds
[amulet2] used time for reduction:                         0.00 seconds
[amulet2] used time for freeing memory:                    0.00 seconds
[amulet2] total process time:                              0.00 seconds
ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet2] AMulet Version 2.1
[amulet2] Aiger multiplier examination tool
[amulet2] Copyright(C) 2020, Daniela Kaufmann, Johannes Kepler University Linz
[amulet2] selected mode: rectification check
[amulet2] reading 'map_4-SP-AR-RC_p2_pready.aig'
[amulet2] MILOA 107 8 0 8 99
[amulet2] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet2] allocating 115 gates
[amulet2] found 15 partial products
[amulet2] assuming booth recoding
[amulet2] found 18 xor-gates
[amulet2] marking xor chain gates
[amulet2] marked 0 xor gates in last slice
[amulet2] remove internal xor gates
[amulet2] removed 33 internal xor gates
[amulet2] slicing based on input cones
[amulet2] totally merged 27 variable(s)
[amulet2] totally promoted 1 variable(s)
[amulet2] filled 8 slices
[amulet2] eliminate single occs
[amulet2] decomposed 29 variables
[amulet2] 
[amulet2] 
[amulet2] started reducing
[amulet2] reducing by slice 7
[amulet2] reducing by slice 6
[amulet2] reducing by slice 5
[amulet2] reducing by slice 4
[amulet2] reducing by slice 3
[amulet2] reducing by slice 2
[amulet2] reducing by slice 1
[amulet2] reducing by slice 0
[amulet2] INCORRECT MULTIPLIER
[amulet2] 
[amulet2] REMAINDER IS
[amulet2] -8*b0*a3;
[amulet2] 
[amulet2] 
[amulet2] COUNTER EXAMPLES ARE: 
[amulet2]   b0 = a3 = 1, all other inputs = 0;
[amulet2] 
[amulet2] 
[amulet2] Counter examples are written to map_4-SP-AR-RC_p2_pready.cex
[amulet2] You can run 'aigsim' from the AIGER library (http://fmv.jku.at/aiger/)
[amulet2] to simulate the provided counter example(s).
[amulet2] 
[amulet2] Note: 'aiger/aigsim map_4-SP-AR-RC_p2_pready.aig map_4-SP-AR-RC_p2_pready.cex' produces output in the form:
[amulet2]   a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
[amulet2] 
[amulet2] maximum resident set size:                       2.25 MB
[amulet2] used time for initializing:                      0.00 seconds
[amulet2] used time for slicing/elimination:               0.00 seconds
[amulet2] used time for reduction:                         0.02 seconds
[amulet2] used time for freeing memory:                    0.00 seconds
[amulet2] total process time:                              0.02 seconds
ABC command line: "source abc_gen_aig_cofacs.script".

Entered genlib library with 6 gates from file "cadence_abc.genlib".
Loading resource file "abc.rc".
[amulet2] AMulet Version 2.1
[amulet2] Aiger multiplier examination tool
[amulet2] Copyright(C) 2020, Daniela Kaufmann, Johannes Kepler University Linz
[amulet2] selected mode: rectification check
[amulet2] reading 'map_4-SP-AR-RC_p2_pready.aig'
[amulet2] MILOA 111 8 0 8 103
[amulet2] assuming ordering as in the ABC generated or AOKI benchmarks
[amulet2] allocating 119 gates
[amulet2] found 15 partial products
[amulet2] assuming booth recoding
[amulet2] found 18 xor-gates
[amulet2] marking xor chain gates
[amulet2] marked 0 xor gates in last slice
[amulet2] remove internal xor gates
[amulet2] removed 33 internal xor gates
[amulet2] slicing based on input cones
[amulet2] totally merged 32 variable(s)
[amulet2] totally promoted 2 variable(s)
[amulet2] filled 8 slices
[amulet2] eliminate single occs
[amulet2] decomposed 33 variables
[amulet2] 
[amulet2] 
[amulet2] started reducing
[amulet2] reducing by slice 7
[amulet2] reducing by slice 6
[amulet2] reducing by slice 5
[amulet2] reducing by slice 4
[amulet2] reducing by slice 3
[amulet2] reducing by slice 2
[amulet2] reducing by slice 1
[amulet2] reducing by slice 0
[amulet2] INCORRECT MULTIPLIER
[amulet2] 
[amulet2] REMAINDER IS
[amulet2] -8*b0*a3+8;
[amulet2] 
[amulet2] 
[amulet2] COUNTER EXAMPLES ARE: 
[amulet2]   all inputs = 0;

[amulet2] 
[amulet2] 
[amulet2] Counter examples are written to map_4-SP-AR-RC_p2_pready.cex
[amulet2] You can run 'aigsim' from the AIGER library (http://fmv.jku.at/aiger/)
[amulet2] to simulate the provided counter example(s).
[amulet2] 
[amulet2] Note: 'aiger/aigsim map_4-SP-AR-RC_p2_pready.aig map_4-SP-AR-RC_p2_pready.cex' produces output in the form:
[amulet2]   a[0]b[0]a[1]b[1]...a[3]b[3]  s[0]s[1]s[2]...s[7]
[amulet2] 
[amulet2] maximum resident set size:                       1.96 MB
[amulet2] used time for initializing:                      0.00 seconds
[amulet2] used time for slicing/elimination:               0.00 seconds
[amulet2] used time for reduction:                         0.00 seconds
[amulet2] used time for freeing memory:                    0.00 seconds
[amulet2] total process time:                              0.00 seconds
# Benchmark "sp-ar-rc-4" written by ABC on Wed May 12 15:38:50 2021
.model sp-ar-rc-4
Aoki format - Input:IN1[1],Output:P[1]
Working on 4-bit multiplier.
Adding 2 bugs at random locations with bug config 1
python ../code_repo/utilities.py map_4-SP-AR-RC.blif 4 2 1 IN1[0]
Bugs added at locations n65 n42
Generating AIG's and remainders for each assignments to targets
Remainder generation done !!
*** Generating rectification check file for amulet *** 

