LIB "my_proc.lib";
LIB "polylib.lib";

ring r = 0, (Z, A, B, m0, m1, m2, m3, m4, m5, n31, n25, n23, n17, n22, n19, n18, n21, n20, n42, n40, n51, n46, n49, n47, n39, n41, n24, n30, n48, n33, n38, n52, n44, n45, n34, n37, n35, n28, n29, n14, n15, n36, n26, n27, a0, a1, a2, b0, b1, b2), lp;

poly f41 = a0^2 - a0;
poly f42 = a1^2 - a1;
poly f43 = a2^2 - a2;
poly f44 = b0^2 - b0;
poly f45 = b1^2 - b1;
poly f46 = b2^2 - b2;

option(redSB);

ideal J0 = f41,f42,f43,f44,f45,f46;

//n22
poly soln = (-44/3*a0*a1*a2*b0*b1*b2+-4/3*a0*a1*a2*b0*b1+8*a0*a1*a2*b0*b2+8/3*a0*a1*a2*b1*b2+4/3*a0*a1*b0*b1*b2-2/3*a0*a1*b0*b1+4/3*a0*a1*b1*b2+8/3*a0*a2*b0*b1*b2-4*a0*a2*b0*b2+28/3*a1*a2*b0*b1*b2-14/3*a1*a2*b0*b1-8/3*a1*a2*b0*b2-20/3*a1*a2*b1*b2+8/3*a1*a2*b1-2/3*a1*b1-4/3*a1*b2+1);

poly quon = (8*a0*a1*a2*b0+16*a0*a1*a2*b1-12*a0*a1-8*a0*a2*b0-16*a0*a2*b1+12*a0-8*a1*a2*b0-16*a1*a2*b1+12*a1+8*a2*b0+16*a2*b1-12);
/*poly red_quo = id2poly_int(reduce(slimgb(quon+J0),J0),J0);
poly red_sol = id2poly_int(slimgb(soln+J0),J0);*/


/*
poly evalEH = -a0*a1+a0+a1;

//quotient(quo,sol)
poly quosol = (2*a0*a1*a2*b0+4*a0*a1*a2*b1-3*a0*a1-2*a0*a2*b0-4*a0*a2*b1+3*a0-2*a1*a2*b0-4*a1*a2*b1+3*a1+2*a2*b0+4*a2*b1-3);

//quotient(sol,quo)
poly solquo = (44*a0*a1*a2*b0*b1*b2-4*a0*a1*a2*b0*b1-24*a0*a1*a2*b0*b2-8*a0*a1*a2*b1*b2-4*a0*a1*b0*b1*b2+2*a0*a1*b0*b1-4*a0*a1*b1*b2-8*a0*a2*b0*b1*b2+12*a0*a2*b0*b2-28*a1*a2*b0*b1*b2+14*a1*a2*b0*b1+8*a1*a2*b0*b2+20*a1*a2*b1*b2-8*a1*a2*b1+2*a1*b1+4*a1*b2-3);

*/

//n19
/*poly soln = (-4/3*b0*a2-1/3*a2*b0+b0*a2+2/3*a2*b0+1);

poly quon = (-8*a0*a1*a2*b0*b1*b2+8*a0*a1*a2*b0*b1-16*a0*a1*a2*b1*b2+16*a0*a1*a2*b1+12*a0*a1*b1*b2-12*a0*a1*b1+8*a0*a2*b0*b1*b2-8*a0*a2*b0*b1+16*a0*a2*b1*b2-16*a0*a2*b1-12*a0*b1*b2+12*a0*b1+8*a1*a2*b0*b1*b2-8*a1*a2*b0*b1+16*a1*a2*b1*b2-16*a1*a2*b1-12*a1*b1*b2+12*a1*b1-8*a2*b0*b1*b2+8*a2*b0*b1-16*a2*b1*b2+16*a2*b1+12*b1*b2-12*b1);
poly red_quo = id2poly_int(slimgb(quon+J0),J0);
poly red_sol = id2poly_int(slimgb(soln+J0),J0);*/
/*
list all = 
list(0, 0, 0, 0, 0, 0),
list(0, 0, 0, 0, 0, 1),
list(0, 0, 0, 0, 1, 0),
list(0, 0, 0, 0, 1, 1),
list(0, 0, 0, 1, 0, 0),
list(0, 0, 0, 1, 0, 1),
list(0, 0, 0, 1, 1, 0),
list(0, 0, 0, 1, 1, 1),
list(0, 0, 1, 0, 0, 0),
list(0, 0, 1, 0, 0, 1),
list(0, 0, 1, 0, 1, 0),
list(0, 0, 1, 0, 1, 1),
list(0, 0, 1, 1, 0, 0),
list(0, 0, 1, 1, 0, 1),
list(0, 0, 1, 1, 1, 0),
list(0, 0, 1, 1, 1, 1),
list(0, 1, 0, 0, 0, 0),
list(0, 1, 0, 0, 0, 1),
list(0, 1, 0, 0, 1, 0),
list(0, 1, 0, 0, 1, 1),
list(0, 1, 0, 1, 0, 0),
list(0, 1, 0, 1, 0, 1),
list(0, 1, 0, 1, 1, 0),
list(0, 1, 0, 1, 1, 1),
list(0, 1, 1, 0, 0, 0),
list(0, 1, 1, 0, 0, 1),
list(0, 1, 1, 0, 1, 0),
list(0, 1, 1, 0, 1, 1),
list(0, 1, 1, 1, 0, 0),
list(0, 1, 1, 1, 0, 1),
list(0, 1, 1, 1, 1, 0),
list(0, 1, 1, 1, 1, 1),
list(1, 0, 0, 0, 0, 0),
list(1, 0, 0, 0, 0, 1),
list(1, 0, 0, 0, 1, 0),
list(1, 0, 0, 0, 1, 1),
list(1, 0, 0, 1, 0, 0),
list(1, 0, 0, 1, 0, 1),
list(1, 0, 0, 1, 1, 0),
list(1, 0, 0, 1, 1, 1),
list(1, 0, 1, 0, 0, 0),
list(1, 0, 1, 0, 0, 1),
list(1, 0, 1, 0, 1, 0),
list(1, 0, 1, 0, 1, 1),
list(1, 0, 1, 1, 0, 0),
list(1, 0, 1, 1, 0, 1),
list(1, 0, 1, 1, 1, 0),
list(1, 0, 1, 1, 1, 1),
list(1, 1, 0, 0, 0, 0),
list(1, 1, 0, 0, 0, 1),
list(1, 1, 0, 0, 1, 0),
list(1, 1, 0, 0, 1, 1),
list(1, 1, 0, 1, 0, 0),
list(1, 1, 0, 1, 0, 1),
list(1, 1, 0, 1, 1, 0),
list(1, 1, 0, 1, 1, 1),
list(1, 1, 1, 0, 0, 0),
list(1, 1, 1, 0, 0, 1),
list(1, 1, 1, 0, 1, 0),
list(1, 1, 1, 0, 1, 1),
list(1, 1, 1, 1, 0, 0),
list(1, 1, 1, 1, 0, 1),
list(1, 1, 1, 1, 1, 0),
list(1, 1, 1, 1, 1, 1);

//n19 net

int i;
link lf=":aw n22.txt";
write(":w n22.txt","a0 a1 a2 b0 b1 b2  quon     red_quo    soln    red_sol");
for (i = 1; i<=64;i++)
	{
	poly tempq = subst(quon,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly temps = subst(soln,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly tempqr = subst(red_quo,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly tempsr = subst(red_sol,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	string sw = string(all[i][1])+"  "+string(all[i][2])+"  "+string(all[i][3])+"  "+string(all[i][4])+"  "+string(all[i][5])+"  "+string(all[i][6])+"     "+string(tempq)+"         "+string(tempqr)+"         "+string(temps)+"        "+string(tempsr);
	write(lf,sw);
	}
close(lf);
/*
//n22 net
int i;
link lf=":aw n22.txt";
write(":w n22.txt","a0 a1 a2 b0 b1 b2  quo  sol  EH  qs  sq");
for (i = 1; i<=64;i++)
	{
	poly tempq = subst(quon22,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly temps = subst(soln22,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly tempe = subst(evalEH,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly tempqs = subst(quosol,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	poly tempsq = subst(solquo,a0,all[i][1],a1,all[i][2],a2,all[i][3],b0,all[i][4],b1,all[i][5],b2,all[i][6]);
	string sw = string(all[i][1])+"  "+string(all[i][2])+"  "+string(all[i][3])+"  "+string(all[i][4])+"  "+string(all[i][5])+"  "+string(all[i][6])+"   "+string(tempq)+"   "+string(temps)+"    "+string(tempe)+"   "+string(tempqs)+"   "+string(tempsq);
	write(lf,sw);
	}
close(lf);*/
