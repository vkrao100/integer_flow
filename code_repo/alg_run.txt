dp = {i -> {sum -> [(i2, i3, i7), (i4, i5, i9)]}}
visited = {i -> sum -> T/F}


[2,2,2,-4,-4]

dp = {0 -> {2 -> [(0)]}}
   = {1 -> {2 -> [(0),(1)]} {4 -> [(0,1)]}}
   = {2 -> {2 -> [(0),(1),(2)]} {4 -> [(0,1),(0,2),(1,2)]} {6 -> [(0,1,2)]}}
   = {3 -> {2 -> [(0)]} {4 -> [(0,1)]} {6 -> [(0,1,2)]}{2 -> [(0,1,2,3)]}}
   = {4 -> {2 -> [(0)]} {4 -> [(0,1)]} {6 -> [(0,1,2)]}{2 -> [(0,1,2,3)]{-2-> [(0,1,2,3,4)]}}

expected output = [[],[0,1,3],[0,1,4],[0,2,3],[0,2,4],[1,2,3],[1,2,4]]

if for any index - a sum is already seen in keys of any other index - then 

possibility of an optimization here - 
Do we need max positive and max negative?


[8,16,-16,4,-2,-2]

base case = 

i s v dp
0 