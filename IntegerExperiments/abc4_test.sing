LIB "linalg.lib";
LIB "dmodapp.lib";
LIB "my_proc.lib";

write(":w log.txt","Log file for abc4.sing");
write(":a log.txt", "");

rtimer=0;
system("--ticks-per-sec",1000);
int t0 = rtimer;

int dp = 4;

option(notWarnSB);
ring R  = 0, (
  s(7),
  s(6),
  AndOcc1Slice6Level4Order5Distance0,
  XorOcc1Slice6Level3Order4Distance1,
  AndOcc1Slice6Level3Order3Distance1,
  XorSlice6Level2Order2Distance2,
  AndOcc1Slice6Level2Order1Distance1,
  AndSlice6Level1Order0Distance3,
  s(5),
  AndSlice5Level6Order11Distance2,
  XorOcc1Slice5Level5Order10Distance3,
  AndOcc1Slice5Level5Order9Distance3,
  AndSlice5Level4Order8Distance3,
  XorSlice5Level4Order7Distance4,
  AndOcc1Slice5Level4Order6Distance3,
  XorSlice5Level3Order5Distance5,
  AndOcc1Slice5Level3Order4Distance4,
  XorSlice5Level2Order3Distance6,
  AndOcc1Slice5Level2Order2Distance4,
  AndSlice5Level1Order1Distance5,
  AndSlice5Level1Order0Distance7,
  s(4),
  AndSlice4Level7Order14Distance4,
  XorOcc1Slice4Level6Order13Distance5,
  AndOcc1Slice4Level6Order12Distance5,
  AndSlice4Level5Order11Distance6,
  XorSlice4Level5Order10Distance6,
  AndOcc1Slice4Level5Order9Distance5,
  XorSlice4Level4Order8Distance7,
  AndOcc1Slice4Level4Order7Distance7,
  XorSlice4Level3Order6Distance8,
  AndOcc1Slice4Level3Order5Distance7,
  XorSlice4Level2Order4Distance9,
  AndSlice4Level2Order3Distance7,
  AndSlice4Level1Order2Distance7,
  AndSlice4Level1Order1Distance9,
  AndSlice4Level1Order0Distance10,
  s(3),
  AndSlice3Level6Order15Distance8,
  XorOcc1Slice3Level6Order14Distance6,
  AndSlice3Level6Order13Distance6,
  XorSlice3Level5Order12Distance7,
  AndOcc1Slice3Level5Order11Distance9,
  AndSlice3Level4Order10Distance10,
  XorSlice3Level4Order9Distance10,
  AndOcc1Slice3Level4Order8Distance9,
  XorSlice3Level3Order7Distance11,
  AndOcc1Slice3Level3Order6Distance11,
  XorSlice3Level2Order5Distance12,
  AndOcc1Slice3Level2Order4Distance11,
  AndSlice3Level1Order3Distance7,
  AndSlice3Level1Order2Distance11,
  AndSlice3Level1Order1Distance13,
  AndSlice3Level1Order0Distance13,
  s(2),
  AndSlice2Level4Order9Distance12,
  XorOcc1Slice2Level4Order8Distance10,
  AndSlice2Level4Order7Distance10,
  XorSlice2Level3Order6Distance11,
  AndOcc1Slice2Level3Order5Distance13,
  XorSlice2Level2Order4Distance14,
  AndOcc1Slice2Level2Order3Distance13,
  AndSlice2Level1Order2Distance11,
  AndSlice2Level1Order1Distance15,
  AndSlice2Level1Order0Distance15,
  s(1),
  XorOcc1Slice1Level2Order3Distance14,
  AndSlice1Level2Order2Distance14,
  AndSlice1Level1Order1Distance15,
  AndSlice1Level1Order0Distance15,
  s(0),
  AndOcc1Slice0Level1Order0Distance15,
  b(3),
  b(2),
  b(1),
  b(0),
  a(3),
  a(2),
  a(1),
  a(0)
), lp;
poly PP(7) =0; 
poly PP(6) = a(3)*b(3); 
poly PP(5) = a(2)*b(3)+ a(3)*b(2); 
poly PP(4) = a(1)*b(3)+ a(2)*b(2)+ a(3)*b(1); 
poly PP(3) = a(0)*b(3)+ a(1)*b(2)+ a(2)*b(1)+ a(3)*b(0); 
poly PP(2) = a(0)*b(2)+ a(1)*b(1)+ a(2)*b(0); 
poly PP(1) = a(0)*b(1)+ a(1)*b(0); 
poly PP(0) = a(0)*b(0); 
poly Car(8) = 0; 
ideal FS0 =
  -AndOcc1Slice0Level1Order0Distance15 + AndOcc1Slice0Level1Order0Distance15^2
;
ideal FS1 =
  -AndSlice1Level1Order0Distance15 + AndSlice1Level1Order0Distance15^2,
  -AndSlice1Level1Order1Distance15 + AndSlice1Level1Order1Distance15^2,
  -AndSlice1Level2Order2Distance14 + AndSlice1Level2Order2Distance14^2,
  -XorOcc1Slice1Level2Order3Distance14 + XorOcc1Slice1Level2Order3Distance14^2
;
ideal FS2 =
  -AndSlice2Level1Order0Distance15 + AndSlice2Level1Order0Distance15^2,
  -AndSlice2Level1Order1Distance15 + AndSlice2Level1Order1Distance15^2,
  -AndSlice2Level1Order2Distance11 + AndSlice2Level1Order2Distance11^2,
  -AndOcc1Slice2Level2Order3Distance13 + AndOcc1Slice2Level2Order3Distance13^2,
  -XorSlice2Level2Order4Distance14 + XorSlice2Level2Order4Distance14^2,
  -AndOcc1Slice2Level3Order5Distance13 + AndOcc1Slice2Level3Order5Distance13^2,
  -XorSlice2Level3Order6Distance11 + XorSlice2Level3Order6Distance11^2,
  -AndSlice2Level4Order7Distance10 + AndSlice2Level4Order7Distance10^2,
  -XorOcc1Slice2Level4Order8Distance10 + XorOcc1Slice2Level4Order8Distance10^2,
  -AndSlice2Level4Order9Distance12 + AndSlice2Level4Order9Distance12^2
;
ideal FS3 =
  -AndSlice3Level1Order0Distance13 + AndSlice3Level1Order0Distance13^2,
  -AndSlice3Level1Order1Distance13 + AndSlice3Level1Order1Distance13^2,
  -AndSlice3Level1Order2Distance11 + AndSlice3Level1Order2Distance11^2,
  -AndSlice3Level1Order3Distance7 + AndSlice3Level1Order3Distance7^2,
  -AndOcc1Slice3Level2Order4Distance11 + AndOcc1Slice3Level2Order4Distance11^2,
  -XorSlice3Level2Order5Distance12 + XorSlice3Level2Order5Distance12^2,
  -AndOcc1Slice3Level3Order6Distance11 + AndOcc1Slice3Level3Order6Distance11^2,
  -XorSlice3Level3Order7Distance11 + XorSlice3Level3Order7Distance11^2,
  -AndOcc1Slice3Level4Order8Distance9 + AndOcc1Slice3Level4Order8Distance9^2,
  -XorSlice3Level4Order9Distance10 + XorSlice3Level4Order9Distance10^2,
  -AndSlice3Level4Order10Distance10 + AndSlice3Level4Order10Distance10^2,
  -AndOcc1Slice3Level5Order11Distance9 + AndOcc1Slice3Level5Order11Distance9^2,
  -XorSlice3Level5Order12Distance7 + XorSlice3Level5Order12Distance7^2,
  -AndSlice3Level6Order13Distance6 + AndSlice3Level6Order13Distance6^2,
  -XorOcc1Slice3Level6Order14Distance6 + XorOcc1Slice3Level6Order14Distance6^2,
  -AndSlice3Level6Order15Distance8 + AndSlice3Level6Order15Distance8^2
;
ideal FS4 =
  -AndSlice4Level1Order0Distance10 + AndSlice4Level1Order0Distance10^2,
  -AndSlice4Level1Order1Distance9 + AndSlice4Level1Order1Distance9^2,
  -AndSlice4Level1Order2Distance7 + AndSlice4Level1Order2Distance7^2,
  -AndSlice4Level2Order3Distance7 + AndSlice4Level2Order3Distance7^2,
  -XorSlice4Level2Order4Distance9 + XorSlice4Level2Order4Distance9^2,
  -AndOcc1Slice4Level3Order5Distance7 + AndOcc1Slice4Level3Order5Distance7^2,
  -XorSlice4Level3Order6Distance8 + XorSlice4Level3Order6Distance8^2,
  -AndOcc1Slice4Level4Order7Distance7 + AndOcc1Slice4Level4Order7Distance7^2,
  -XorSlice4Level4Order8Distance7 + XorSlice4Level4Order8Distance7^2,
  -AndOcc1Slice4Level5Order9Distance5 + AndOcc1Slice4Level5Order9Distance5^2,
  -XorSlice4Level5Order10Distance6 + XorSlice4Level5Order10Distance6^2,
  -AndSlice4Level5Order11Distance6 + AndSlice4Level5Order11Distance6^2,
  -AndOcc1Slice4Level6Order12Distance5 + AndOcc1Slice4Level6Order12Distance5^2,
  -XorOcc1Slice4Level6Order13Distance5 + XorOcc1Slice4Level6Order13Distance5^2,
  -AndSlice4Level7Order14Distance4 + AndSlice4Level7Order14Distance4^2
;
ideal FS5 =
  -AndSlice5Level1Order0Distance7 + AndSlice5Level1Order0Distance7^2,
  -AndSlice5Level1Order1Distance5 + AndSlice5Level1Order1Distance5^2,
  -AndOcc1Slice5Level2Order2Distance4 + AndOcc1Slice5Level2Order2Distance4^2,
  -XorSlice5Level2Order3Distance6 + XorSlice5Level2Order3Distance6^2,
  -AndOcc1Slice5Level3Order4Distance4 + AndOcc1Slice5Level3Order4Distance4^2,
  -XorSlice5Level3Order5Distance5 + XorSlice5Level3Order5Distance5^2,
  -AndOcc1Slice5Level4Order6Distance3 + AndOcc1Slice5Level4Order6Distance3^2,
  -XorSlice5Level4Order7Distance4 + XorSlice5Level4Order7Distance4^2,
  -AndSlice5Level4Order8Distance3 + AndSlice5Level4Order8Distance3^2,
  -AndOcc1Slice5Level5Order9Distance3 + AndOcc1Slice5Level5Order9Distance3^2,
  -XorOcc1Slice5Level5Order10Distance3 + XorOcc1Slice5Level5Order10Distance3^2,
  -AndSlice5Level6Order11Distance2 + AndSlice5Level6Order11Distance2^2
;
ideal FS6 =
  -AndSlice6Level1Order0Distance3 + AndSlice6Level1Order0Distance3^2,
  -AndOcc1Slice6Level2Order1Distance1 + AndOcc1Slice6Level2Order1Distance1^2,
  -XorSlice6Level2Order2Distance2 + XorSlice6Level2Order2Distance2^2,
  -AndOcc1Slice6Level3Order3Distance1 + AndOcc1Slice6Level3Order3Distance1^2,
  -XorOcc1Slice6Level3Order4Distance1 + XorOcc1Slice6Level3Order4Distance1^2,
  -AndOcc1Slice6Level4Order5Distance0 + AndOcc1Slice6Level4Order5Distance0^2
;
ideal FS7 =
  0
;
ideal FI =
  -a(0) + a(0)^2,
  -a(1) + a(1)^2,
  -a(2) + a(2)^2,
  -a(3) + a(3)^2,
  -b(0) + b(0)^2,
  -b(1) + b(1)^2,
  -b(2) + b(2)^2,
  -b(3) + b(3)^2
;
ideal CS0 =
  0
;
ideal CS1 =
  0
;
ideal CS2 =
  AndOcc1Slice2Level3Order5Distance13 * AndOcc1Slice2Level2Order3Distance13,
  AndSlice2Level4Order7Distance10 * AndOcc1Slice2Level3Order5Distance13
;
ideal CS3 =
  AndOcc1Slice3Level3Order6Distance11 * AndOcc1Slice3Level2Order4Distance11,
  AndOcc1Slice3Level4Order8Distance9 * AndOcc1Slice3Level3Order6Distance11,
  AndOcc1Slice3Level5Order11Distance9 * AndOcc1Slice3Level4Order8Distance9,
  AndSlice3Level6Order13Distance6 * AndOcc1Slice3Level5Order11Distance9
;
ideal CS4 =
  AndOcc1Slice4Level3Order5Distance7 * AndSlice4Level2Order3Distance7,
  AndOcc1Slice4Level4Order7Distance7 * AndOcc1Slice4Level3Order5Distance7,
  AndOcc1Slice4Level5Order9Distance5 * AndOcc1Slice4Level4Order7Distance7,
  AndOcc1Slice4Level6Order12Distance5 * AndOcc1Slice4Level5Order9Distance5
;
ideal CS5 =
  AndOcc1Slice5Level3Order4Distance4 * AndOcc1Slice5Level2Order2Distance4,
  AndOcc1Slice5Level4Order6Distance3 * AndOcc1Slice5Level3Order4Distance4,
  AndOcc1Slice5Level5Order9Distance3 * AndOcc1Slice5Level4Order6Distance3
;
ideal CS6 =
  AndOcc1Slice6Level3Order3Distance1 * AndOcc1Slice6Level2Order1Distance1
;
ideal CS7 =
  0
;
ideal HS7 =
  0;
ideal HT7 = 
  FS6, FS7, CS6, CS7, HS7
;
ideal S7 =
  -s(7) + reduce ((1 - AndOcc1Slice6Level4Order5Distance0), HT7)
 ;
ideal T(7) = FI, FS6, FS7, CS6, CS7, S7;
poly Car(7) =   reduce (s(7) + 2 * Car(8) - PP(7), T(7));
 Car(7);

ideal HS6 =
  -AndOcc1Slice6Level2Order1Distance1 + (1 - AndSlice5Level4Order8Distance3) * AndSlice6Level1Order0Distance3, 
  -AndOcc1Slice6Level3Order3Distance1 + (1 - AndSlice5Level6Order11Distance2) * XorSlice6Level2Order2Distance2
;
ideal HT6 = 
  FS5, FS6, CS5, CS6, HS6
;
ideal S6 =
  -AndSlice6Level1Order0Distance3 + a(3) * b(3), 
  -XorSlice6Level2Order2Distance2 + AndSlice5Level4Order8Distance3 + (1 - AndSlice6Level1Order0Distance3) - 2 * AndSlice5Level4Order8Distance3 * (1 - AndSlice6Level1Order0Distance3),
  -XorOcc1Slice6Level3Order4Distance1 + AndSlice5Level6Order11Distance2 + (1 - XorSlice6Level2Order2Distance2) - 2 * AndSlice5Level6Order11Distance2 * (1 - XorSlice6Level2Order2Distance2),
  -AndOcc1Slice6Level4Order5Distance0 + reduce ((1 - AndOcc1Slice6Level2Order1Distance1) * (1 - AndOcc1Slice6Level3Order3Distance1), HT6), 
  -s(6) + XorOcc1Slice6Level3Order4Distance1
;
ideal T(6) = FI, FS5, FS6, CS5, CS6, S6;
poly Car(6) =   reduce (s(6) + 2 * Car(7) - PP(6), T(6));
 Car(6);

ideal HS5 =
  -AndOcc1Slice5Level2Order2Distance4 + AndSlice4Level2Order3Distance7 * AndSlice5Level1Order0Distance7, 
  -AndOcc1Slice5Level3Order4Distance4 + (1 - AndSlice4Level5Order11Distance6) * XorSlice5Level2Order3Distance6, 
  -AndOcc1Slice5Level4Order6Distance3 + XorSlice5Level3Order5Distance5 * AndSlice5Level1Order1Distance5, 
  -AndOcc1Slice5Level5Order9Distance3 + (1 - AndSlice4Level7Order14Distance4) * XorSlice5Level4Order7Distance4
;
ideal HT5 = 
  FS4, FS5, CS4, CS5, HS5
;
ideal S5 =
  -AndSlice5Level1Order0Distance7 + a(3) * b(2), 
  -AndSlice5Level1Order1Distance5 + a(2) * b(3), 
  -XorSlice5Level2Order3Distance6 + AndSlice4Level2Order3Distance7 + AndSlice5Level1Order0Distance7 - 2 * AndSlice4Level2Order3Distance7 * AndSlice5Level1Order0Distance7,
  -XorSlice5Level3Order5Distance5 + AndSlice4Level5Order11Distance6 + (1 - XorSlice5Level2Order3Distance6) - 2 * AndSlice4Level5Order11Distance6 * (1 - XorSlice5Level2Order3Distance6),
  -XorSlice5Level4Order7Distance4 + XorSlice5Level3Order5Distance5 + AndSlice5Level1Order1Distance5 - 2 * XorSlice5Level3Order5Distance5 * AndSlice5Level1Order1Distance5,
  -AndSlice5Level4Order8Distance3 + reduce ((1 - AndOcc1Slice5Level2Order2Distance4) * (1 - AndOcc1Slice5Level3Order4Distance4), HT5) +1, 
  -XorOcc1Slice5Level5Order10Distance3 + AndSlice4Level7Order14Distance4 + (1 - XorSlice5Level4Order7Distance4) - 2 * AndSlice4Level7Order14Distance4 * (1 - XorSlice5Level4Order7Distance4),
  -AndSlice5Level6Order11Distance2 + reduce ((1 - AndOcc1Slice5Level4Order6Distance3) * (1 - AndOcc1Slice5Level5Order9Distance3), HT5), 
  -s(5) + XorOcc1Slice5Level5Order10Distance3
;
ideal T(5) = FI, FS4, FS5, CS4, CS5, S5;
poly Car(5) =   reduce (s(5) + 2 * Car(6) - PP(5), T(5));
 Car(5);

ideal HS4 =
  -AndOcc1Slice4Level3Order5Distance7 + XorSlice4Level2Order4Distance9 * AndSlice4Level1Order1Distance9, 
  -AndOcc1Slice4Level4Order7Distance7 + (1 - AndSlice3Level6Order15Distance8) * XorSlice4Level3Order6Distance8, 
  -AndOcc1Slice4Level5Order9Distance5 + XorSlice4Level4Order8Distance7 * AndSlice4Level1Order2Distance7, 
  -AndOcc1Slice4Level6Order12Distance5 + AndSlice3Level6Order13Distance6 * XorSlice4Level5Order10Distance6
;
ideal HT4 = 
  FS3, FS4, CS3, CS4, HS4
;
ideal S4 =
  -AndSlice4Level1Order0Distance10 + a(3) * b(1), 
  -AndSlice4Level1Order1Distance9 + a(2) * b(2), 
  -AndSlice4Level1Order2Distance7 + a(1) * b(3), 
  -AndSlice4Level2Order3Distance7 + (1 - AndSlice3Level4Order10Distance10) * AndSlice4Level1Order0Distance10, 
  -XorSlice4Level2Order4Distance9 + AndSlice3Level4Order10Distance10 + (1 - AndSlice4Level1Order0Distance10) - 2 * AndSlice3Level4Order10Distance10 * (1 - AndSlice4Level1Order0Distance10),
  -XorSlice4Level3Order6Distance8 + XorSlice4Level2Order4Distance9 + AndSlice4Level1Order1Distance9 - 2 * XorSlice4Level2Order4Distance9 * AndSlice4Level1Order1Distance9,
  -XorSlice4Level4Order8Distance7 + AndSlice3Level6Order15Distance8 + (1 - XorSlice4Level3Order6Distance8) - 2 * AndSlice3Level6Order15Distance8 * (1 - XorSlice4Level3Order6Distance8),
  -XorSlice4Level5Order10Distance6 + XorSlice4Level4Order8Distance7 + AndSlice4Level1Order2Distance7 - 2 * XorSlice4Level4Order8Distance7 * AndSlice4Level1Order2Distance7,
  -AndSlice4Level5Order11Distance6 + reduce ((1 - AndOcc1Slice4Level3Order5Distance7) * (1 - AndOcc1Slice4Level4Order7Distance7), HT4), 
  -XorOcc1Slice4Level6Order13Distance5 + AndSlice3Level6Order13Distance6 + XorSlice4Level5Order10Distance6 - 2 * AndSlice3Level6Order13Distance6 * XorSlice4Level5Order10Distance6,
  -AndSlice4Level7Order14Distance4 + reduce ((1 - AndOcc1Slice4Level5Order9Distance5) * (1 - AndOcc1Slice4Level6Order12Distance5), HT4), 
  -s(4) + XorOcc1Slice4Level6Order13Distance5
;
ideal T(4) = FI, FS3, FS4, CS3, CS4, S4;
poly Car(4) =   reduce (s(4) + 2 * Car(5) - PP(4), T(4));
 Car(4);

ideal HS3 =
  -AndOcc1Slice3Level2Order4Distance11 + AndSlice3Level1Order0Distance13 * AndSlice3Level1Order1Distance13, 
  -AndOcc1Slice3Level3Order6Distance11 + (1 - AndSlice2Level4Order9Distance12) * XorSlice3Level2Order5Distance12, 
  -AndOcc1Slice3Level4Order8Distance9 + XorSlice3Level3Order7Distance11 * AndSlice3Level1Order2Distance11, 
  -AndOcc1Slice3Level5Order11Distance9 + AndSlice2Level4Order7Distance10 * XorSlice3Level4Order9Distance10
;
ideal HT3 = 
  FS2, FS3, CS2, CS3, HS3
;
ideal S3 =
  -AndSlice3Level1Order0Distance13 + a(3) * b(0), 
  -AndSlice3Level1Order1Distance13 + a(2) * b(1), 
  -AndSlice3Level1Order2Distance11 + a(1) * b(2), 
  -AndSlice3Level1Order3Distance7 + a(0) * b(3), 
  -XorSlice3Level2Order5Distance12 + AndSlice3Level1Order0Distance13 + AndSlice3Level1Order1Distance13 - 2 * AndSlice3Level1Order0Distance13 * AndSlice3Level1Order1Distance13,
  -XorSlice3Level3Order7Distance11 + AndSlice2Level4Order9Distance12 + (1 - XorSlice3Level2Order5Distance12) - 2 * AndSlice2Level4Order9Distance12 * (1 - XorSlice3Level2Order5Distance12),
  -XorSlice3Level4Order9Distance10 + XorSlice3Level3Order7Distance11 + AndSlice3Level1Order2Distance11 - 2 * XorSlice3Level3Order7Distance11 * AndSlice3Level1Order2Distance11,
  -AndSlice3Level4Order10Distance10 + reduce ((1 - AndOcc1Slice3Level2Order4Distance11) * (1 - AndOcc1Slice3Level3Order6Distance11), HT3), 
  -XorSlice3Level5Order12Distance7 + AndSlice2Level4Order7Distance10 + XorSlice3Level4Order9Distance10 - 2 * AndSlice2Level4Order7Distance10 * XorSlice3Level4Order9Distance10,
  -AndSlice3Level6Order13Distance6 + XorSlice3Level5Order12Distance7 * AndSlice3Level1Order3Distance7, 
  -XorOcc1Slice3Level6Order14Distance6 + XorSlice3Level5Order12Distance7 + AndSlice3Level1Order3Distance7 - 2 * XorSlice3Level5Order12Distance7 * AndSlice3Level1Order3Distance7,
  -AndSlice3Level6Order15Distance8 + reduce ((1 - AndOcc1Slice3Level4Order8Distance9) * (1 - AndOcc1Slice3Level5Order11Distance9), HT3), 
  -s(3) + XorOcc1Slice3Level6Order14Distance6
;
ideal T(3) = FI, FS2, FS3, CS2, CS3, S3;
poly Car(3) =   reduce (s(3) + 2 * Car(4) - PP(3), T(3));
 Car(3);

ideal HS2 =
  -AndOcc1Slice2Level2Order3Distance13 + AndSlice2Level1Order0Distance15 * AndSlice2Level1Order1Distance15, 
  -AndOcc1Slice2Level3Order5Distance13 + AndSlice1Level2Order2Distance14 * XorSlice2Level2Order4Distance14
;
ideal HT2 = 
  FS1, FS2, CS1, CS2, HS2
;
ideal S2 =
  -AndSlice2Level1Order0Distance15 + a(2) * b(0), 
  -AndSlice2Level1Order1Distance15 + a(1) * b(1), 
  -AndSlice2Level1Order2Distance11 + a(0) * b(2), 
  -XorSlice2Level2Order4Distance14 + AndSlice2Level1Order0Distance15 + AndSlice2Level1Order1Distance15 - 2 * AndSlice2Level1Order0Distance15 * AndSlice2Level1Order1Distance15,
  -XorSlice2Level3Order6Distance11 + AndSlice1Level2Order2Distance14 + XorSlice2Level2Order4Distance14 - 2 * AndSlice1Level2Order2Distance14 * XorSlice2Level2Order4Distance14,
  -AndSlice2Level4Order7Distance10 + XorSlice2Level3Order6Distance11 * AndSlice2Level1Order2Distance11, 
  -XorOcc1Slice2Level4Order8Distance10 + XorSlice2Level3Order6Distance11 + AndSlice2Level1Order2Distance11 - 2 * XorSlice2Level3Order6Distance11 * AndSlice2Level1Order2Distance11,
  // -XorOcc1Slice2Level4Order8Distance10 + XorSlice2Level3Order6Distance11 * AndSlice2Level1Order2Distance11,//bug
  -AndSlice2Level4Order9Distance12 + reduce ((1 - AndOcc1Slice2Level2Order3Distance13) * (1 - AndOcc1Slice2Level3Order5Distance13), HT2), 
  -s(2) + XorOcc1Slice2Level4Order8Distance10
;
ideal T(2) = FI, FS1, FS2, CS1, CS2, S2;
poly Car(2) =   reduce (s(2) + 2 * Car(3) - PP(2), T(2));
 Car(2);

ideal HS1 =
  0;
ideal HT1 = 
  FS0, FS1, CS0, CS1, HS1
;
ideal S1 =
  -AndSlice1Level1Order0Distance15 + a(1) * b(0), 
  -AndSlice1Level1Order1Distance15 + a(0) * b(1), 
  -AndSlice1Level2Order2Distance14 + AndSlice1Level1Order0Distance15 * AndSlice1Level1Order1Distance15, 
  -XorOcc1Slice1Level2Order3Distance14 + AndSlice1Level1Order0Distance15 + AndSlice1Level1Order1Distance15 - 2 * AndSlice1Level1Order0Distance15 * AndSlice1Level1Order1Distance15,
  -s(1) + XorOcc1Slice1Level2Order3Distance14
;
ideal T(1) = FI, FS0, FS1, CS0, CS1, S1;
poly Car(1) =   reduce (s(1) + 2 * Car(2) - PP(1), T(1));
 Car(1);

ideal HS0 =
  -AndOcc1Slice0Level1Order0Distance15 + a(0) * b(0)
;
ideal HT0 = 
  FS0, CS0, HS0
;
ideal S0 =
  -s(0) + reduce (AndOcc1Slice0Level1Order0Distance15, HT0)
 ;
ideal T(0) = FI, FS0, CS0, S0;
poly Car(0) =   reduce (s(0) + 2 * Car(1) - PP(0), T(0));
 Car(0);

 int t1 = rtimer-t0;
write(":a log.txt", "Time taken for verification is",t1);
write(":a log.txt", "");

 //check if the circuit indeed implements specification
if (Car(0) == 0)
{
  write(":a log.txt", "The circuit is verified against given specification.");
  write(":a log.txt", "Exiting");
  quit;
}
else
{
  write(":a log.txt", "The remainder is ", Car(0));
  write(":a log.txt", "");
  write(":a log.txt", "Circuit doesn't implement specification. Attempting rectification now.");
  write(":a log.txt", "");
}

int i_PP = 0;
list PP;
list temp_PP;
for (i_PP; i_PP <= 2*dp -1; i_PP++)
{
  temp_PP = PP(i_PP);
  PP = PP + temp_PP;
}

int i_SS = 0;
list SS;
list temp_SS;
for (i_SS; i_SS <= 2*dp -1; i_SS++)
{
  temp_SS = s(i_SS);
  SS = SS + temp_SS;
}

int i_TT = 0;
list TT;
list temp_TT;
for (i_TT; i_TT <= 2*dp -1; i_TT++)
{
  temp_TT = sort(T(i_TT));
  temp_TT = temp_TT[1];
  TT = TT + temp_TT;
}

/*
list CC;
CC[2*dp + 1] = 0;
for (int i = 2*dp ; i > 0 ; i--)
{
  CC[i] = reduce((2*CC[i+1] + SS[i] - PP[i]),TT[i]);
  CC[i];
}
*/
//TO DO: remainder analysis and pruning search space

list coneTips =  remainder_partition(Car(0),dp);
list op = decomp(coneTips,dp);
list cones;
for (int i = 1;i <= size(op); i++)
{
  // c = insert(c,coneTips[i]);
  cones[i] = -s(op[i]);
}
if (size(op) == 1)
{ 
  if (op[1] == 0)
  {
    list rectCheck = prune_logical_cone(cones,(T(0)));
  }  
  else
  {
    list rectCheck = prune_logical_cone(cones,(T(op[1])+T(op[1]-1)));
  }
}
else
{
  ideal J;
  for (int i = 1; i <= size(op); i++)
  {
    J = J+T(op[i]);
  }
  list rectCheck = prune_logical_cone(cones,J);
}

//list rectCheck = prune_logical_cone(coneTips,J1);

// list rectCheck = -AndSlice1Level1Order0Distance2Lit12;
int t2 = rtimer-t1;
write (":a log.txt", "Time for identifying rectifiable nets",t2);
write(":a log.txt", "");


int rectified = 0;
for(int rect=1; rect<=size(rectCheck);rect++)
{ 
  if (rectified == 0)
  {
    //rectifying at location rf
    poly rf = rectCheck[rect];
    write (":a log.txt", "Checking for rectification at net", rf);

    int ind_r;  
    int i_ind;

    //finding index
    for (int j = 1; j <= size(TT); j++)
    {
      for (i_ind = 1; i_ind <= size(TT[j]) ; i_ind++)
      {
        if (lead(TT[j][i_ind]) == rf)
          {
            ind_r = i_ind;
            int buggy_slice = j;
          }
      }   
    }       

    //replacing with rf+1 and rf+0
    ideal Slice_L = TT[buggy_slice];
    Slice_L[ind_r] = rf+1;
    ideal Slice_H = TT[buggy_slice];
    Slice_H[ind_r] = rf;
    
    list TT_L = TT;
    list TT_H = TT;

    TT_L = delete(TT_L,buggy_slice);
    TT_L = insert(TT_L,Slice_L,buggy_slice-1);

    TT_H = delete(TT_H,buggy_slice);
    TT_H = insert(TT_H,Slice_H,buggy_slice-1);

    //finding rL
    list CC_L;
    CC_L[buggy_slice+1] = Car(buggy_slice);
    for (int i = buggy_slice ; i > 0 ; i--)
    {
      CC_L[i] = reduce((2*CC_L[i+1] + SS[i] - PP[i]),TT_L[i]);
      CC_L[i];
    }

    //finding rH
    list CC_H;
    CC_H[buggy_slice + 1]= Car(buggy_slice);
    for (int i = buggy_slice; i > 0 ; i--)
    {
      CC_H[i] = reduce((2*CC_H[i+1] + SS[i] - PP[i]),TT_H[i]);
      CC_H[i];
    }

    poly rlh = reduce((CC_L[1]*CC_H[1]),FI);

    kill CC_L,CC_H,TT_L,TT_H;

    if (rlh == 0)
    {
      int t3 = rtimer-t2;
      write(":a log.txt","Circuit rectifiable at",rf);
      write(":a log.txt","Time to find the rectification net:" ,t3);

      poly quo;
      poly rem;
      poly prem;

      //needs checking from here 
      //slices equivalent to Jf
      //division of specification by Jf starts here.
      list TT_Jf = TT;
      ideal temp_Jf = TT[buggy_slice];
      //ideal partial = temp_prem[(ind_r - 2)..(ind_r-1)] , temp_prem[(ind_r+2)..(size(temp_prem))];
      ideal partial = temp_Jf[(ind_r+1)..(size(temp_Jf))];
      TT_Jf = delete(TT_Jf,buggy_slice);
      TT_Jf = insert(TT_Jf,partial,buggy_slice-1);
      
      // for(int i = 1; i < buggy_slice; i++)
      // {
      //   TT_Jf[i] = 0;
      // }

      list CC_prem;
      CC_prem[buggy_slice + 1]=Car(buggy_slice);
      for (int i = buggy_slice ; i > 0 ; i--)
      {
        CC_prem[i] = reduce((2*CC_prem[i+1] + SS[i] - PP[i]),TT_Jf[i]);
        CC_prem[i];
      }

      prem = CC_prem[1];
      "prem:",prem;
      //division of specification by Jf stops here.

      //division by xi starts here.    
      rem, quo = multivariate_burg(prem,lead(rf),FI);  
      //division by xi ends here.
      kill TT_Jf;

      //slices equivalent to Js      
      list TT_Js = TT;
      for (int i = 2*dp; i > buggy_slice ; i--)
      {
        TT_Js[i] = 0;
      }
      ideal temp_Js = TT[buggy_slice];
      ideal partial_Js = temp_Js[1..(ind_r-1)];
      TT_Js[buggy_slice] = partial_Js;

      /*
      for (int i = 2*dp ; i > 0 ; i--)
      {
        CC_Js[i] = reduce((2*CC_Js[i+1] + SS[i] - PP[i]),TT_Js[i]);
        CC_Js[i];
      }
      */

      //ideal Js = temp_prem[1..ind_r-1] + S(0) + S(1);

      ideal dec = variables(quo);
      //ideal JCp = quo,Js;

      if (size(dec)>=1)
      {
        /*
        "quotient is not a constant";
        ideal JG = slimgb(JCp);
        matrix V = lift(JG,rem);
        matrix Vt = transpose(V);
        //Vt;
        matrix U = lift(JCp,JG);
        //U;
        poly sol;
        int i;
        for(i=1;i<=size(JG);i++)
        {
          sol = sol + (Vt[1,i]*U[1,i]);
        }
        */
        write(":a log.txt","Quotient is not a constant");
        ideal JCp = quo;
        for (int j = 1; j <= buggy_slice; j++)
        {
          JCp = JCp+TT_Js[j];
        }
        ideal JG = slimgb(JCp);
        matrix V = lift(JG,rem);
        matrix Vt = transpose(V);
        //Vt;
        matrix U = lift(JCp,JG);
        //U;
        poly sol;
        int i;
        for(i=1;i<=size(JG);i++)
        {
          sol = sol + (Vt[1,i]*U[1,i]);
        }
      }
      else
      { 
        "quotient is a constant";
        if (quo != 1)
        {
          matrix quoi = inverse(quo);
        }
        else
        {
          matrix quoi = 1;
        }
        poly irem   = quoi[1,1]*rem;
        //poly sol    = reduce(irem,Js+FI);
        list CC_Js;
        CC_Js[2*dp + 1]=0; 
        for (int i = 2*dp ; i > 0 ; i--)
        {
          CC_Js[i] = reduce(irem,TT_Js[i]);
          irem = CC_Js[i];
        }
        poly sol = CC_Js[1];
      }
      //to here.

      //verifying if the rectification polynomial computed is correct
      TT[buggy_slice][ind_r] = rf+sol; 
      list CC;
      CC[2*dp + 1] = 0;
      for (int i = 2*dp ; i > 0 ; i--)
        {
          CC[i] = reduce((2*CC[i+1] + SS[i] - PP[i]),TT[i]);
          CC[i];
        }

      if (CC[1] == 0)
      {
        write(":a log.txt","Rectification successful. The rectification function is", rf+sol);
      }
      rectified = 1;         
    }  
    else
    {
      write(":a log.txt","Circuit not rectifiable at",rf);
    }  
  }
}
write(":a log.txt", "End of computations.");
write(":a log.txt", "Total time elapsed:",rtimer-t0);