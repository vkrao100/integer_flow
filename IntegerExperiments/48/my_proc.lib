LIB "crypto.lib";
LIB "normaliz.lib";
LIB "ring.lib";
//LIB "gate2poly.lib";
LIB "teachstd.lib";

/* 
proc inter_JS(ideal g_JA, ideal J0C, ideal XA)
{
	ideal JS = J0C;
	list tmp_JS;
	for(int i=1; i<=size(g_JA); i=i+1)
	{
		if(reduce(g_JA[i],XA) == g_JA[i])
		{
			tmp_JS = insert(tmp_JS,g_JA[i]);
		}
	}
	for(i=1; i<=size(tmp_JS); i=i+1)
	{
		JS = JS + tmp_JS[i];
	}
	return(JS);
}
*/

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////


// Compute vanishing polynomials for a list of variables
proc van_id(list X)
{
	ideal I;
	for(int i=1; i<=size(X); i=i+1)
	{
		I = I + (X[i]^2 - X[i]);
	}
	return(I);
}

//Find ring indices of variables in the (nested) list L 
proc var2index(list L)
{
	list V;
	for(int i=1; i<=size(L[1]); i=i+1)
	{
		V = insert(V,rvar(L[1][i]),size(V));
	}
	return(V);
}

//Find XA, XB, XC
proc find_var_part(list tmp_XA, list tmp_XB)
{
	list XA,XB,XC;
	int ind;
	list ind_xa = var2index(tmp_XA);
	list ind_xb = var2index(tmp_XB);

	for(int i=1; i<=size(ind_xa); i=i+1)
	{	
		ind = find_index(ind_xb,ind_xa[i]);
		if(ind != 0)
		{
			XC = insert(XC,var(ind_xa[i]),size(XC) );
			ind_xb = delete(ind_xb,ind);
		}
		else
		{
			XA = insert(XA,var(ind_xa[i]), size(XA) );
		}
	} 
	
	for(i=1;i<=size(ind_xb);i=i+1)
	{
		XB = insert(XB, var(ind_xb[i]), size(XB));
	}	
	return(XA,XB,XC);
}

//Convert a list to an ideal
proc list2ideal(list L)
{
	ideal I;
	for(int i=2; i<=size(L); i=i+1)
	{
		I = I + L[i];
	}
	return(I);
}

//Return list of zero elements
proc zero_list(int n);
{	
	list l;
	for(int i=1; i<=n; i=i+1)
	{
		l = insert(l,0);
	}
	return(l);
}

//Compute Standard Monomials
proc comp_sm(ideal I, list XC, int sab)
{
	list sm; 
	list bl = zero_list(size(XC));
	intmat N[1][sab+size(XC)];
	poly tmp;
	int i,j;

	for(i=1; i<=2^size(XC); i=i+1 )
	{		
		tmp = intmat2mons(N)[1];
		
		if(reduce(tmp,lead(I)) != 0)
		{
			sm = insert(sm,tmp);
		}

		bl = binary_add(bl);

		for(j=1; j<=size(XC); j=j+1)
		{
			N[1,sab+j] = bl[j];
		}

	}
	return(sm);
}


// Compute JS
proc inter_JS(ideal JA, list XA, ideal J0C)
{
	poly elm = 1;
	for(int i=1; i<=size(XA); i=i+1)
	{
		elm = elm*XA[i];
	}
	ideal JS = eliminate(JA,elm);
	return(JS);
}

// Compute JL
proc inter_JL(ideal JB, list XB, ideal J0C)
{
	poly elm = 1;
	for(int i=1; i<=size(XB); i=i+1)
	{
		elm = elm*XB[i];
	}
	ideal tmp_JL = eliminate(JB,elm);
	"computing quotient J0C:tmp_JL";
	ideal JL = quotient(J0C,tmp_JL);
	return(JL);
}

// Write the new ring with XA,XB,XC variable order
proc new_ring(list XA, list XB, list XC)
{
	string rr; int i;
	rr = "ring Q = 2, (";

	if(size(XA) != 0)
	{rr = rr + string(XA[1]);}
	for(i=2; i<=size(XA); i=i+1)
	{
		rr = rr + "," + string(XA[i]);
	}
	
	if(size(XB) != 0)
	{rr = rr + "," + string(XB[1]);}
	for(i=2; i<=size(XB); i=i+1)
	{
		rr = rr + "," + string(XB[i]);
	}
	
	if(size(XC) != 0)
	{rr = rr + "," + string(XC[1]);}
	for(i=2; i<=size(XC); i=i+1)
	{
		rr = rr + "," + string(XC[i]);
	}

	rr = rr + "), lp;";
	write(":w new.ring", rr);
}

//Pick appropriate polynomials
proc pick_g(ideal GD, list sm, poly curr)
{
	int i,j;
	poly gdi;
	for(i=1; i<=size(GD); i++)
	{
		gdi = GD[i];
		for(j=1; j<=size(sm); j=j+1)
		{
			if(lead(gdi) == sm[j])
			{
				gdi = gdi - lead(gdi);
				if((gdi == 1 || gdi == 0) && GD[i] != curr)
				{
					return(GD[i]);
				}	
			}
		}
	}

	if(i == size(GD)+1)
	{
		return(0);
	}	
}

//Returns Interpolants of increasing size
proc get_larger_interpolants(ideal JS, ideal JL, ideal JD, ideal J0C, list sm, int max_no)
{
	list L; int count;
	int br;
	L = insert(L,JS,size(L));
	poly gdi = sm[size(sm) div 2]+1; //Last element of sm is 1
	ideal GD;
	count=1;

	while(1)
	{
		if(count > max_no){break;}

		GD = groebner(JD + gdi);
		L = insert(L,JS*GD,size(L));
		gdi = pick_g(GD, sm, gdi);
		if(gdi == 0)
		{
			L = insert(L,JL,size(L));
			return(L);
		}

		count = count + 1;
	}

	return(L);
}

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////

// ECO work

proc get_index(ideal J, poly f)
{
	int i;
	for(i=1;i<=size(J); i++)
	{
		if(lead(J[i]) == f)
		{
			i;
			return(i);
		}
		else 
		{
		return(-1);
		}
	}
	
}

proc get_index_str(ideal J, string f)
{
	int i;
	for(i=1;i<=size(J); i++)
	{
		if(string(lead(J[i])) == f)
		{
			return(i);
		}
	}
	return(0);
}

//Author of return_primary_var_ideals: Vikas
proc elm_PI(ideal g, int num)
{
	list L = ringlist(R);
	int i;
	int j;
    int nu = size(L[2]);
    int nidx = nu-2*num+1;
    ideal searching;
    ideal solution;
    list idxmatch;
    for(i=1;i<=size(g);i=i+1)
    {	
    	searching = variables(g[i]);
    	idxmatch  = var2index(searching);
    	for(j=1;j<=size(idxmatch);j=j+1)
    	{	
    		if(idxmatch[j]<nidx)
    		{
    			break;
    		}
    	}
    	if (j > size(idxmatch))
    	{
    		solution = solution + g[i];
    	} 
    }
    return(solution);
}

//Author of return_primary_var_ideals: Vikas
proc elm_PI_list(ideal g, ideal PI)
{
	list L = ringlist(R);
	int i;
	int j;
    int nu = size(L[2]);
    int nidx = nu-size(PI)+1;
    ideal searching;
    ideal solution;
    list idxmatch;
    for(i=1;i<=size(g);i=i+1)
    {	
    	searching = variables(g[i]);
    	idxmatch  = var2index(searching);
    	for(j=1;j<=size(idxmatch);j=j+1)
    	{	
    		if(idxmatch[j]<nidx)
    		{
    			break;
    		}
    	}
    	if (j > size(idxmatch))
    	{
    		solution = solution + g[i];
    	} 
    }
    return(solution);
}

proc Spoly(poly f1, poly f2)
{
	
}

// added by vikas for FMCAD experiments

/* This function computes the multivariant division of polynomials.*/
proc multivariate_burg(poly f, list m, ideal g)
{
	list u;
	ideal j0 = g; 
	list k = m; 
	int index;
	for(int i = 1; i <= size(k); i++)
	{
		u[i] = 0;
	} 
	poly r = 0;
	poly h = f; 
	while (h != 0 )
	{
		index =  isDivisible(h, k);
		h = reduce(h,j0);
		if(index != -1)
		{
			u[index] = u[index] + (lead(h)/lead(k[index]));
			"dividend-",h;
			h = h - (lead(h)/lead(k[index]))*k[index];
			"quotient-",u[index];
			"divisor-",(k[index]);
            "residue-",h;  	
		} 
		else
		{
			r = r + lead(h);
			h = h - lead(h);
		}
	} 
	return (r,u[1]);   	 
}

/* Checks if any polynomial in a given list can divide h */ 
proc isDivisible(poly h, list k)
{
	poly r;
	for(int i = 1; i <= size(k); i++)
	{
		r = division(leadmonom(h),leadmonom(k[i]))[2][1];
		if(r == 0)
		{
			return (i); 
		}
	}
	return (-1);
}

proc isDivisiblei(poly h, ideal k)
{
	poly r;
	for(int i = 1; i <= size(k); i++)
	{	
		r = division(leadmonom(h),leadmonom(k[i]))[2][1];
		if(r == 0)
		{
			return (i); 
		}
	}
	return (-1);
}

/*input - poly f to be reduced and ideal J
   the ideal J will be sorted according to the ring order 
   and the generated index list will be used for 
   consecutive division. */
proc fast_reduce(poly f, ideal J)
{	
	list l = sortvec(J);
	int divide;
	int di;
	for (di= size(l[1]); di>0; di=di-1)
	{	
		divide=1;
		while(divide != -1 & f != 0) 
		{
			f = f - (lead(f)/lead(J[l[1][di]]))*J[l[1][di]];
			divide = isDivisible(lead(f),lead(J[l[1][di]]));
		}
	}
	return (f);
}

proc remainder_partition(poly rema, int datapathsize)
{
	int i,j;
	list L1;
	list L = poly2list(rema);
	//determine the coefficient list from remainder
	for (i=1;i<=size(L);i++)
	{	
		L1 = insert(L1,leadcoef(L[i][2]));
	}
	//remove the duplicates from the coefficient list
    L1 = removelistduplicates(L1);
    "list of coefficients from remainder",L1;
	//identify z_* string affected output list using the coefficients
	list bout, exps;
	bout, exps = find_bz(L1,datapathsize);
	"list of affected outputs",bout;
	return(bout,exps);
}

proc find_bz(list L, int dps) //dps: datapath size; for 32 bit multiplier, dps=32
{
	string fac,sub,sub1;
	int i,j,k,t;
	list exp;
	list bout;
	list exps;
	list to_del;
    
	for(i=0; i<dps; i++) //making list of all exponents
	{
		exp = exp + list(i);
	}

	for(i=1; i<=size(L); i++)
	{
		to_del = list();
		fac = string(L[i]);
		// fac;
		for(j=1; j<=size(exp); j++) //checking in the current exp
		{	
			if(exp[j] != 1) //exp = 0
			{	
				if(exp[j] == 0)
				{sub = "1";sub1 = "1";}
				else
				{sub = parstr(R)+string(exp[j]);
				 sub1 = parstr(R)+"^"+string(exp[j]);}
				
				if( (find(fac,sub) != 0) || (find(fac,sub1) != 0)) // if substring present
				{	
				bout = insert(bout,"z_"+string(exp[j])+"_"); //out buggy
				exps = insert(exps,exp[j]);
				to_del = to_del + list(j);//no need to check for it in next factor
				}
			} 
			else 
			{
				sub = parstr(R)+"+";
				t = find(fac,sub);
				// fac;t;
				if(t != 0)
				{
					bout = insert(bout,"z_"+string(exp[j])+"_"); //out buggy
					exps = insert(exps,exp[j]);
					to_del = to_del + list(j);//no need to check for it in next factor
					// continue;
				}
				sub = parstr(R)+")";
				t = find(fac,sub);
				// fac;t;
				if(t != 0)
				{
					bout = insert(bout,"z_"+string(exp[j])+"_"); //out buggy
					exps = insert(exps,exp[j]);
					to_del = to_del + list(j);//no need to check for it in next factor
				} 
			}
		}
		for(k=size(to_del); k>0; k--) //deleting already checked exponents
		{
				exp = delete(exp,to_del[k]);
		}	
	}
	return(bout,exps);
}

/* record the logical cone of a given net/poly */ 

proc logical_cone(string tip, ideal J)
{
	list vars;
	ideal k = J; 
	int index,i;
	poly r = 0;

	for(i=1;i<=size(k);i++)
	{
		if (string(lead(k[i]))==tip)
		{
			poly h = lead(k[i]);
		}
	}

	while(h != 0 )
	{
		index =  isDivisiblei(h, k);
		if(index != -1)
		{	
			h = h - (lead(h)/lead(k[index]))*k[index];
			vars = insert(vars,lead(k[index]));
		} 
		else
		{
			r = r + lead(h);
			h = h - lead(h);
		}
	} 
	vars = removelistduplicates(vars);

	return(vars);
}

proc prune_logical_cone(list coneTips, ideal J1)
{
	int conetip,i;
	list Vars;
	list final;

	for(conetip=1;conetip<=size(coneTips);conetip++)
	{	
		Vars = insert(Vars,logical_cone(coneTips[conetip],J1));
		"logical cone of output",coneTips[conetip],Vars[conetip];
	}
	list temp_list = Vars[1];
	if (size(Vars)==1)
	{
		return(temp_list);
	}
	else
	{
		for(i=1;i<size(Vars);i++)
		{	
			temp_list = intrsct_lists(temp_list,Vars[i+1]);
		}
		"pruned intersection of cones to be checked for rectification",temp_list;
		return(temp_list);
	}
}

proc removelistduplicates(list vars)
{
	int i,j;
	for (i=1;i<=size(vars);i++)
	{
		for(j=i+1;j<=size(vars);j++)
		{
			if (vars[i] == vars[j])
			{
				vars = delete(vars,j);
				j--;
			}
		}
	}
	return(vars);
}

proc sublists(list L)
{
  if (size(L)==1)
  {
  	return(list(list(),L));
  }
  list L1 = L[1..size(L)-1];
  list S1 = sublists(L1);
  list S2;
  for (int i = 1;i<=size(S1);i++)
  {
    S2[i]=S1[i]+list(L[size(L)]);
  }
  return(S1+S2);
}

proc intrsct_lists(list LL, list MM)
{
  list new;
  int jj=1;
  for (int j=1; j<=size(LL); j++)
  {
     if (member(LL[j],MM))
     {
        if (not member(LL[j],new))
        {
          new[jj]=LL[j];
          jj++;
        }
     }
  }
  return(new);
}

proc member(def e, list L)
{
  for (int j=1; j<=size(L); j++)
  {
    if (L[j]==e)
    { 
    	return(1); 
    }
  }
  return(0);
}


//procedure for quotient of ideals as discussed in chapter 2 of adams
// and loustaunau - by arpitha
proc interpoly(ideal J, poly f)
{
	ideal preGB = w*J,(1-w)*f;
	ideal GGB = groebner(preGB);
	ideal GEB = eliminate(preGB,w);
	ideal L = GEB/f;
	return(L);
}

proc interid(ideal J, ideal I)
{
	ideal preGB = w*J,(1-w)*I;
	ideal GGB = groebner(preGB);
	ideal GEB = eliminate (GGB,w);
	return(GEB);
}


proc quot(ideal J,poly I)
{

	//int si = size(I);
	int sj = size(J);
	int i;

	ideal K;//groebner basis
	ideal L;//gb by fi
	ideal E;
	list Q;
	
	for (i=1;i<=si;i++)
		{
			K = interpoly(J,I[i]);
			L = K/I[i];
			Q[i] = L;
		}

	int sq = size(Q);
	ideal M = Q[1];
		
	for (i=2;i<=sq;i++)
		{
			i;
			ideal F = Q[i];
			ideal buf = interid(M,F);
			ideal M = buf;
		}
	return(M);
}
